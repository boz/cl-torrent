(in-package :cl-torrent)

(defun decode (sin)
  (let ((c (read-next-char sin t)))
    (decode-dispatch c sin)))

(defun decode-dispatch (c sin)
  (cond
    ((eq    c :eof)   nil)
    ((char= c #\d)    (decode-dict    c sin))
    ((char= c #\l)    (decode-list    c sin))
    ((char= c #\i)    (decode-integer c sin))
    ((digit-char-p c) (decode-string  c sin))))

(defun decode-string (c sin)
  (multiple-value-bind (len c)
      (slurp-decimal sin c)
    (unless (char= #\: c)
      (error "Invalid string: expected ~c got ~c" #\: c))
    (let* ((buf (make-array len))
           (rlen (read-sequence buf sin)))
      (unless (= rlen len)
        (error "Tried to read ~d byte, read ~d" len rlen))
      buf)))

(defun decode-integer (c sin)
  (declare (ignore c))
  (multiple-value-bind (x c)
      (slurp-decimal sin)
    (unless (char= #\e c)
      (error "Invalid integer encoding: ended with ~c" c))
    x))

(defun decode-dict (c stream)
  (declare (ignore c))
  (let ((h (make-hash-table)))
    h))

(defun decode-list (c sin)
  (declare (ignore sin))
  (list))
